<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xyh44934776.github.io</id>
    <title>Sanri&apos;s Blog</title>
    <updated>2021-02-18T01:52:14.748Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xyh44934776.github.io"/>
    <link rel="self" href="https://xyh44934776.github.io/atom.xml"/>
    <logo>https://xyh44934776.github.io/images/avatar.png</logo>
    <icon>https://xyh44934776.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Sanri&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Https理解]]></title>
        <id>https://xyh44934776.github.io/post/https-li-jie/</id>
        <link href="https://xyh44934776.github.io/post/https-li-jie/">
        </link>
        <updated>2021-02-18T01:25:56.000Z</updated>
        <content type="html"><![CDATA[<p>HPPTS是HTTP+SSL/TLS的简称<br>
SSL是基于HTTP之下TCP之上的一个协议层<br>
TLS是SSL更新到3.0后，对SSL的一个更新。可以被认为是SSL3.1</p>
<p>常见的<br>
非对称加密：RSA<br>
对称加密：AES、DES<br>
Hash算法：MD5、SHA1、SHA256</p>
<p>流程：<br>
1.客户端向服务端发起请求，服务端返回了证书<br>
2.客户端验证证书，生成随机数作为密钥，并用证书中的公钥加密，传给服务端<br>
3.服务端用私钥解密，并用hash验证数据。两端通信将用随机数密钥来加解密。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[重装电脑后配置环境]]></title>
        <id>https://xyh44934776.github.io/post/chong-zhuang-dian-nao-hou-pei-zhi-huan-jing/</id>
        <link href="https://xyh44934776.github.io/post/chong-zhuang-dian-nao-hou-pei-zhi-huan-jing/">
        </link>
        <updated>2021-02-18T01:23:32.000Z</updated>
        <content type="html"><![CDATA[<p>1.Xcode</p>
<p>2.VS Code</p>
<p>3.homebrew<br>
/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</p>
<p>4.安装rvm</p>
<p>5.安装Ruby<br>
rvm install 版本<br>
Rvm use 版本 --default</p>
<p>6.更换Gem Sources<br>
gem sources -r https://rubygems.org/<br>
gem sources -a https://gems.ruby-china.com/</p>
<p>7.安装cocoapods<br>
sudo gem install cocoapods</p>
<p>8.RSA生成公私钥<br>
ssh-keygen -t rsa -b 4096 -C &quot;44934776@qq.com&quot;<br>
pbcopy &lt; ~/.ssh/id_rsa.pub</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Block]]></title>
        <id>https://xyh44934776.github.io/post/block/</id>
        <link href="https://xyh44934776.github.io/post/block/">
        </link>
        <updated>2021-02-18T01:20:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="block在内存上的分配">Block在内存上的分配</h1>
<p>Block如果访问了外部变量，则属于Stack Block</p>
<p>Block如果没有访问外部变量，则属于Global Block</p>
<p>对Stack Block执行Copy 操作 则属于Heap Block</p>
<p>ARC会有一下情况对Stack Block进行copy操作：</p>
<p>1.Block作为函数值返回</p>
<p>2.Block用strong指针指向</p>
<p>3.Block作为系统函数中比如using block</p>
<p>4.Block在GCD的参数中</p>
<h1 id="block捕获外部变量">Block捕获外部变量</h1>
<p>局部变量是会被Block捕获。</p>
<p>静态局部变量被Block捕获后是通过指针来传递的。</p>
<p>普通局部变量被捕获后是通过值来传递的。</p>
<p>全局变量不会被Block捕获。</p>
<p>被__block修饰的变量。被Block捕获后，会生成一个结构体。</p>
<p>结构体里有个forwarding指针，指向了结构体。</p>
<p>当Block被copy时，也会对捕获的变量进行copy。</p>
<p>如果捕获的变量是__weak，也不会形成强引用。</p>
<h1 id="retain修饰的block">Retain修饰的Block</h1>
<p>MRC下Block不用retain修饰的原因是，用retain修饰会使引用计数+1，但不会生成新的对象。因此在使用Block时，Block有可能已经被释放。因此需要用copy修饰。ARC，无论strong还是copy，系统都会对Block做copy操作，将栈Block拷贝到堆。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Xcode-select]]></title>
        <id>https://xyh44934776.github.io/post/xcode-select/</id>
        <link href="https://xyh44934776.github.io/post/xcode-select/">
        </link>
        <updated>2020-08-12T05:29:59.000Z</updated>
        <content type="html"><![CDATA[<p>我们的Xcode使用版本可以根据Xcode &gt; Preferences &gt; Locations路径查看到正在使用的版本和该版本路径。<br>
<img src="https://xyh44934776.github.io/post-images/1597210228623.png" alt="" loading="lazy"><br>
在终端xcode-select可使用的命令如下:</p>
<pre><code>xcode-select [-h, –help] 
xcode-select [-p, –print-path] 
xcode-select [-s , –switch ] 
xcode-select [-v, –version] 
xcode-select [-r, –reset ]
</code></pre>
<p>查看xcode-select可使用命令，使用如下命令</p>
<pre><code>xcode-select -h 
xcode-select --help
</code></pre>
<p>查看当前正在使用的Xcode版本路径，使用如下命令</p>
<pre><code>xcode-select -p 
xcode-select --print-path
</code></pre>
<p>查看xcode-select版本</p>
<pre><code>xcode-select -v 
xcode-select --version
</code></pre>
<p>重置为默认的command line tools path</p>
<pre><code>xcode-select -r 
xcode-select -reset
</code></pre>
<p>修改Xcode使用版本</p>
<pre><code>sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer 
sudo xcode-select -s /Applications/Xcode.app/Contents/Developer
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Runtime应用]]></title>
        <id>https://xyh44934776.github.io/post/runtime-ying-yong/</id>
        <link href="https://xyh44934776.github.io/post/runtime-ying-yong/">
        </link>
        <updated>2020-08-12T05:29:03.000Z</updated>
        <content type="html"><![CDATA[<h1 id="方法交换">方法交换</h1>
<p>之前一直知道通过runtime中的方法可以进行方法交换，可是一直没有实际写过。所以写个demo。</p>
<pre><code>#import &lt;objc/runtime.h&gt;
交换方法需要在load函数里做

1.获取两个方法的实现
Method imageNameMethod = class_getClassMethod(self, @selector(imageNamed:));

Method yh_imageWithNameMethod = class_getClassMethod(self, @selector(yh_imageWithName:));

2.交换方法实现 
method_exchangeImplementations(imageNameMethod, yh_imageWithNameMethod);
</code></pre>
<p>注意的地方：<br>
1.方法交换一般是在load函数里做。<br>
2.在新写的方法里如果需要执行老的方法时，调用的时候[self 新名字]。<br>
3.分类的方法交换也是全局生效，不是引用分类文件的地方生效。不要误以为没有加入头文件，方法交换就不生效了。</p>
<h1 id="分类增加属性">分类增加属性</h1>
<pre><code>#import &lt;objc/runtime.h&gt;

重写getter和setter的方法

static const void *testKey = &amp;testKey;

- (void)setIsTest:(BOOL)isTest {
    objc_setAssociatedObject(self, testKey, [NSNumber numberWithBool:isTest], OBJC_ASSOCIATION_ASSIGN);
}

- (BOOL)isTest {
    return [objc_getAssociatedObject(self, testKey) boolValue];
}

</code></pre>
<p>解释一下static const void *testKey = &amp;testKey;这么写的原因<br>
void *代表着无类型指针，也就是任何类型的指针都可以给它赋值。而&amp;代表这取址运算符，因此这句话的含义就是将testKey的地址赋给testKey。</p>
<p>此外还有两种方式来写key值</p>
<pre><code>static NSString *key = @&quot;key&quot;; 
static char key;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Runtime学习]]></title>
        <id>https://xyh44934776.github.io/post/runtime-xue-xi/</id>
        <link href="https://xyh44934776.github.io/post/runtime-xue-xi/">
        </link>
        <updated>2020-08-12T05:26:50.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://xyh44934776.github.io/post-images/1597210033738.png" alt="" loading="lazy"><br>
类本身是一个描述, 描述里包含实例化这个类需要多大的内存, 以及内存的每个byte是什么内容, 这个内容的头部是一个isa, 其他内容是ivar的值或指针.<br>
对象是按类的描述所从内存空间里面开辟出对应大小的空间并填充isa指针(alloc), 类的初始化方法往这个空间里的byte里面存初始化的内容.</p>
<p>实例化的对象本质是<br>
<img src="https://xyh44934776.github.io/post-images/1597210039302.png" alt="" loading="lazy"></p>
<p>iOS中所有类都继承NSObject<br>
<img src="https://xyh44934776.github.io/post-images/1597210113392.png" alt="" loading="lazy"><br>
NSObject 是一个包含着isa指针的类<br>
那NSObject又是什么呢？<br>
<img src="https://xyh44934776.github.io/post-images/1597210118792.png" alt="" loading="lazy"><br>
可以看到，根据苹果官方的注释，只要符合objc_object的结构即是一个对象，因此可以这么理解，只要是包含isa（Class类型）的结构体指针他就是一个对象。</p>
<p>根据注释发现Class代表着一个类，而NSObject就是一个Class，而Class类型是objc_class。<br>
<img src="https://xyh44934776.github.io/post-images/1597210139976.png" alt="" loading="lazy"></p>
<p>可以看到objc_class也拥有着isa（Class类型），因此可以导出NSObject是一个Class，而Class是一个对象，因此NSObject是一个对象。<br>
同理按照定义，只要类型是一个包含isa（Class类型）的结构体指针，那么它就是一个对象。</p>
<p>一个NSObject对象占用多少内存？<br>
一个指针变量所占用的大小（64bit占8个字节，32bit占4个字节）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ReactNative学习]]></title>
        <id>https://xyh44934776.github.io/post/reactnative-xue-xi/</id>
        <link href="https://xyh44934776.github.io/post/reactnative-xue-xi/">
        </link>
        <updated>2020-08-12T05:25:45.000Z</updated>
        <content type="html"><![CDATA[<h1 id="react-naitve-指令">React Naitve 指令</h1>
<pre><code>react-native init MyApp --version 0.44.3

npm install 安装module 

react-native run-ios --simulator 'iPhone 8'

npm start 开启服务

npm update -g react-native-cli 更新react-native环境

npm install --save react-native@0.44.3 安装指定版本的react native

react-native upgrade 更新项目文件

npm install realm 安装对应的库

react-native link 链接对应的库

npm uninstall react-native-video 删除对应的库文件
</code></pre>
<h1 id="reactredux">ReactRedux</h1>
<p>Dispatch Action -&gt; reducer处理state-&gt; Provider接收到变化的State-&gt;setState（dummyState）-&gt;connect的组件触发componentWillReceiveProps-&gt;进行props判断，如果判断有变化-&gt;更新子组件props-&gt;触发子组件的Render。</p>
<h1 id="flatlist遇到的问题">FlatList遇到的问题</h1>
<p>上拉加载会触发 onEndReached</p>
<p>FlatList触发onEndReached的时机是：<br>
1._onContentSizeChange<br>
2._onScroll<br>
3._onLayout</p>
<p>现象是上拉加载会触发两次onEndReached<br>
排除了1，3，因此是上拉加载时触发了两次_onScroll<br>
（_onScroll时ScrollView的回调函数，只要滑动则调用。）</p>
<p>onEndReached被包了一层（_maybeCallOnEndReached），因此从源码看出是有条件的被触发<br>
<img src="https://xyh44934776.github.io/post-images/1597209975417.png" alt="" loading="lazy"></p>
<p>现在解释上拉加载触发两次onEndReached的原因：<br>
上拉加载----&gt;触发_onScroll----&gt;满足条件----&gt;触发onEndReached（在此时页面仍然是被滑动的，因此仍然会触发_onScroll）----&gt;同时又满足条件----&gt;又触发了onEndReacher</p>
<p>再解释一下，代码如下时上拉加载会触发一次onEndReached的原因<br>
<img src="https://xyh44934776.github.io/post-images/1597209981314.png" alt="" loading="lazy"></p>
<p>上拉加载----&gt;触发_onScroll----&gt;满足条件----&gt;触发onEndReached（在此时页面仍然是被滑动的，因此仍然会触发_onScroll）----&gt;而此时条件是不被满足的，因此不会触发onEndReacher</p>
<p>那满足的onEndReacher的条件是什么？<br>
<img src="https://xyh44934776.github.io/post-images/1597209986897.png" alt="" loading="lazy"></p>
<p>经过调试发现，this._hasDataChangedSinceEndReached是导致两次现象不同的变量。<br>
<img src="https://xyh44934776.github.io/post-images/1597209992416.png" alt="" loading="lazy"></p>
<p>可以看到这个变量在componentWillReceiveProps的时候被赋值，因此是在网络请求后，FlatList的datesource会被改变，因此可以满足触发onEndReacher的条件，而触发一次onEndReacher的原因是，在网络请求后，数据没有被更新，这个变量为false，因此不满足条件。</p>
<p>解决方案：</p>
<p>现在目前的触发场景：上拉加载----&gt;触发_onScroll----&gt;满足条件----&gt;触发onEndReached（在此时页面仍然是被滑动的，因此仍然会触发_onScroll）----&gt;同时又满足条件----&gt;又触发了onEndReacher，因此只要切段第二次的满足条件，即可。原理就是加状态位控制。</p>
<h1 id="reactnative-颜色写法">ReactNative 颜色写法</h1>
<p>以下这些格式的颜色代码都是支持的：</p>
<ul>
<li>'#f0f' (#rgb)</li>
<li>'#f0fc' (#rgba)</li>
<li>'#ff00ff' (#rrggbb)</li>
<li>'#ff00ff00' (#rrggbbaa)</li>
<li>'rgb(255, 255, 255)'</li>
<li>'rgba(255, 255, 255, 1.0)'</li>
<li>'hsl(360, 100%, 100%)'</li>
<li>'hsla(360, 100%, 100%, 1.0)'</li>
<li>'transparent'</li>
<li>'red'</li>
<li>0xff00ff00 (0xrrggbbaa)</li>
</ul>
<h1 id="flux-redux">Flux &amp;&amp; Redux</h1>
<p><img src="https://xyh44934776.github.io/post-images/1597210000932.png" alt="" loading="lazy"><br>
Store 就是保存数据的地方，你可以把它看成一个容器。整个应用只能有一个 Store。</p>
<p><img src="https://xyh44934776.github.io/post-images/1597210005698.png" alt="" loading="lazy"><br>
Redux 规定， 一个 State 对应一个 View。只要 State 相同，View 就相同。你知道 State，就知道 View 是什么样，反之亦然。<br>
Action 描述当前发生的事情。改变 State 的唯一办法，就是使用 Action。它会运送数据到 Store。<br>
store.dispatch()是 View 发出 Action 的唯一方法<br>
Store 收到 Action 以后，必须给出一个新的 State，这样 View 才会发生变化。这种 State 的计算过程就叫做 Reducer。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Python学习]]></title>
        <id>https://xyh44934776.github.io/post/python-xue-xi/</id>
        <link href="https://xyh44934776.github.io/post/python-xue-xi/">
        </link>
        <updated>2020-08-12T05:24:35.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://xyh44934776.github.io/post-images/1597209904341.png" alt="" loading="lazy"></figure>
<h1 id="python2-中文编码">Python2 中文编码</h1>
<p><code>#coding=utf-8</code></p>
<p><img src="https://xyh44934776.github.io/post-images/1597209915056.png" alt="" loading="lazy"><br>
<img src="https://xyh44934776.github.io/post-images/1597209919558.png" alt="" loading="lazy"><br>
<img src="https://xyh44934776.github.io/post-images/1597209923355.png" alt="" loading="lazy"><br>
<img src="https://xyh44934776.github.io/post-images/1597209928226.png" alt="" loading="lazy"><br>
<img src="https://xyh44934776.github.io/post-images/1597209933575.png" alt="" loading="lazy"><br>
<img src="https://xyh44934776.github.io/post-images/1597209937592.png" alt="" loading="lazy"><br>
<img src="https://xyh44934776.github.io/post-images/1597209941274.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[OSI模型]]></title>
        <id>https://xyh44934776.github.io/post/osi-mo-xing/</id>
        <link href="https://xyh44934776.github.io/post/osi-mo-xing/">
        </link>
        <updated>2020-08-12T05:24:00.000Z</updated>
        <content type="html"><![CDATA[<p>OSI是一个试图使各种计算机在世界范围内互连为网络的标准框架，它将网络体系划分为7层，分为：<br>
7.应用层<br>
6.表达层<br>
5.会话层<br>
4.传输层<br>
3.网络层<br>
2.数据链路层<br>
1.物理层</p>
<p>越靠下，就越接近硬件，且每一层都定义了许多协议，而这些协议的总称就是互联网协议（Internet Protocol Suite），大家都遵守了这些协议就可以完成通讯，从而构建起来互联网。<br>
其中TCP/IP是其中一些协议的总称，被称为协议簇，而TCP/IP将通信过程简化并抽象成4层：<br>
4.应用层<br>
3.传输层<br>
2.网络互联层<br>
1.网络接口层<br>
<img src="https://xyh44934776.github.io/post-images/1597209867955.jpg" alt="" loading="lazy"></p>
<p>TCP/IP协议簇包含了以下比较常见的协议<br>
<img src="https://xyh44934776.github.io/post-images/1597209872120.png" alt="" loading="lazy"></p>
<p>下面就按照每一层的顺序来讲一下常见的协议：</p>
<p>物理层：也就是实体层，为传输数据所需要的物理链路创建、维持、拆除，而提供具有机械的，电子的，功能的和规范的特性。简单的说，物理层确保原始的数据可在各种物理媒体上传输。规定了网络的一些电气特性，作用是负责传送0和1的电信号。</p>
<p>数据链路层：在实体层中定义了电信号，而链路层则是将这些电信号进行规范，Ethernet协议规定，一组电信号构成一个数据包，叫&quot;帧&quot;（Frame）。每一帧分成两个部分：标头（Head）和数据（Data），而标头里又包含数据包的一些说明项，比如发送者、接受者、数据类型等等；&quot;数据&quot;则是数据包的具体内容。发送者和接受者又通过MAC（Media Access Control）地址来标识，MAC地址是48个二进制位构成，可以标识网卡的唯一性。可以简单的说数据链路层的协议确定了MAC地址，有了MAC地址，发送端又会通过广播（Broadcast）方式向网络内所有的计算机发送数据，每台计算通过判断数据包里的MAC地址是否符合选择是否接受。</p>
<p>网络层：网络层提供路由和寻址的功能，使两终端系统能够互连且决定最佳路径，并具有一定的拥塞控制和流量控制的能力。由于TCP/IP协议体系中的网络层功能由IP协议规定和实现，故又称IP层。紧紧的依靠MAC地址是无法在不同一个子网络的的计算机进行传输，因为，网络区域被区分为多个子网络，不同子网络的计算机是无法知道对方计算机的MAC地址，因此，必须找到一种方法，能够区分哪些MAC地址属于同一个子网络，哪些不是。如果是同一个子网络，就采用广播方式发送，否则就采用&quot;路由&quot;方式发送。因此，此层确定的协议IP协议（Internet Protocol）所定义的地址IP地址，用IP地址就可以确定子网络的位置，目前广泛采用的网络协议是IP协议的第四版，成为IPv4，这个版本规定了IP地址由32个二进制位组成。IP地址分为两部分，前一部分代表网络，后一部分代表主机。比如IP地址172.16.254.1，这是一个32位的地址，假定它的网络部分是前24位（172.16.254），那么主机部分就是后8位（最后的那个1）。网络部分和主机部分又是通过什么来区分的呢，通过子网掩码(Subnet Mask)来区分。所谓&quot;子网掩码&quot;，就是表示子网络特征的一个参数。它在形式上等同于IP地址，也是一个32位二进制数字，它的网络部分全部为1，主机部分全部为0。比如，IP地址172.16.254.1，如果已知网络部分是前24位，主机部分是后8位，那么子网络掩码就是11111111.11111111.11111111.00000000，写成十进制就是255.255.255.0。知道&quot;子网掩码&quot;，我们就能判断，任意两个IP地址是否处在同一个子网络。方法是将两个IP地址与子网掩码分别进行AND运算（两个数位都为1，运算结果为1，否则为0），然后比较结果是否相同，如果是的话，就表明它们在同一个子网络中，否则就不是。比如，已知IP地址172.16.254.1和172.16.254.233的子网掩码都是255.255.255.0，请问它们是否在同一个子网络？两者与子网掩码分别进行AND运算，结果都是172.16.254.0，因此它们在同一个子网络。总结一下，IP协议的作用主要有两个，一个是为每一台计算机分配IP地址，另一个是确定哪些地址在同一个子网络。IP协议所发送的数据包也包含了两个部分：标头（Head）和数据（Data），而这个IP数据包被插入到了以太网数据包中的数据部分中。</p>
<p>数据链路层发送的数据包中包含了MAC地址，可是我们又如何来确定MAC地址，此时通过网络层中的ARP协议（Adress Resolution Protocol）就可以确定自网络内中的主机MAC地址，ARP协议通过广播的方式发送一个MAC地址为FF:FF:FF:FF:FF:FF的数据包，当子网络内的主机收到数据包判断数据包里的IP地址和自己的的IP地址相同时，便发送自己的MAC地址。</p>
<p>那IP地址又是如何来确定的，会在应用层说</p>
<p>传输层：当有了MAC地址和IP地址后，我们可以进行主机与主机的通信，但是如果是主机间的应用的通信又该如何确定呢，而此层定义的UDP协议则通过加入端口（Port）参数，就可以确定是哪个应用来通信，端口是0到65535的整数，正好是16个2进制位，0到1023被系统所占用，因此应用只能选用1023之后的端口号。加入了端口参数，就有了新的数据包，而UDP数据包也是有标头和数据组成，而UDP数据包被放到了IP数据包中的数据部分中。</p>
<p>Http和Socket连接区别</p>
<p>socket连接:<br>
建立起一个TCP连接需要经过“三次握手”：<br>
第一次握手：客户端发送syn包(syn=j)到服务器，并进入SYN_SEND状态，等待服务器确认；<br>
第二次握手：服务器收到syn包，必须确认客户的SYN（ack=j+1），同时自己也发送一个SYN包（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；<br>
第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ack=k+1)，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。<br>
握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。断开连接时服务器和客户端均可以主动发起断开TCP连接的请求，断开过程需要经过“四次握手”。<br>
socket连接就是所谓的长连接，理论上客户端和服务器端一旦加你其连接将不会主动断掉；但是由于各种环境因素可能会连接断开，比如说：服务器端或客户端主机down了，网络故障，或者两者之间长时间没有传输数据，网络防火墙可能会断开该连接以释放网络资源。所以当一个socket连接中没有数据传输的时候，那么为了维持连接需要发送心跳消息，具体心跳消息格式是开发者自己定义的。</p>
<p>HTTP连接:<br>
HTTP协议即超文本传送协议(HypertextTransfer Protocol )，是Web联网的基础，也是手机联网常用的协议之一，HTTP协议是建立在TCP协议之上的一种应用。<br>
HTTP连接最显著的特点是客户端发送的每次请求都需要服务器回送响应，在请求结束后，会主动释放连接。从建立连接到关闭连接的过程称为“一次连接”。<br>
1）在HTTP 1.0中，客户端的每次请求都要求建立一次单独的连接，在处理完本次请求后，就自动释放连接。<br>
2）在HTTP 1.1中则可以在一次连接中处理多个请求，并且多个请求可以重叠进行，不需要等待一个请求结束后再发送下一个请求。<br>
由于HTTP在每次请求结束后都会主动释放连接，因此HTTP连接是一种“短连接”，要保持客户端程序的在线状态，需要不断地向服务器发起连接请求。通常的 做法是即时不需要获得任何数据，客户端也保持每隔一段固定的时间向服务器发送一次“保持连接”的请求，服务器在收到该请求后对客户端进行回复，表明知道客户端“在线”。若服务器长时间无法收到客户端的请求，则认为客户端“下线”，若客户端长时间无法收到服务器的回复，则认为网络已经断开。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node杂项]]></title>
        <id>https://xyh44934776.github.io/post/node-za-xiang/</id>
        <link href="https://xyh44934776.github.io/post/node-za-xiang/">
        </link>
        <updated>2020-08-12T05:23:35.000Z</updated>
        <content type="html"><![CDATA[<h1 id="module">Module</h1>
<p>在 Node.js 模块系统中，每个文件都视为独立的模块。<br>
在每个模块中，module 的自由变量是一个指向表示当前模块的对象的引用。 为了方便，module.exports 也可以通过全局模块的 exports 对象访问。 module 实际上不是全局的，而是每个模块本地的。实际上总会执行module.exports = exports</p>
<h1 id="utilinherits">util.inherits</h1>
<p>util.inherits(constructor, superConstructor)是一个实现对象间原型继承 的函数。<br>
JavaScript 的面向对象特性是基于原型的，与常见的基于类的不同。JavaScript 没有 提供对象继承的语言级别特性，而是通过原型复制来实现的。</p>
<p>继承只能继承在原型中定义的函数，而构造函数内部是不被继承的。</p>
]]></content>
    </entry>
</feed>